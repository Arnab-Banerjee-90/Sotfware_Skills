[start:stop]

Both start and stop are optional. If you leave off start, the slice will start at the beginning of the iterable. If you leave off stop, the slice will continue until the end of the iterable.

By using this behavior, you can quickly make copies of iterables by slicing them from front to back with [:].

[start:stop:step]

Steps change how Python counts as it moves through the creation of a slice. Positive steps, like 2, skip items from left to right. Negative steps, like -1, move from right to left through the collection.

>>> my_list = list(range(20))
>>> my_list
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
>>> my_list[-2:-5]
[]
>>> my_list[-2:-5:-1]
[18, 17, 16]
>>> my_list[::-1]
[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
>>> my_list
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
>>> my_list[:4]
[0, 1, 2, 3]
>>> my_list[-1:-5:-1]
[19, 18, 17, 16]
>>> my_list[-1:-5:-1][::-1]
[16, 17, 18, 19]
>>> my_list[:4]+my_list[-1:-5:-1][::-1]
[0, 1, 2, 3, 16, 17, 18, 19]